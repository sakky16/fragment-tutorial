package com.trisysit.epc_android.SqliteDatabase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_MASTER".
*/
public class LocationMasterDao extends AbstractDao<LocationMaster, Void> {

    public static final String TABLENAME = "LOCATION_MASTER";

    /**
     * Properties of entity LocationMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocationL1 = new Property(0, String.class, "locationL1", false, "LOCATION_L1");
        public final static Property LocationL2 = new Property(1, String.class, "locationL2", false, "LOCATION_L2");
        public final static Property LocationL3 = new Property(2, String.class, "locationL3", false, "LOCATION_L3");
        public final static Property LocationL4 = new Property(3, String.class, "locationL4", false, "LOCATION_L4");
        public final static Property LocationL5 = new Property(4, String.class, "locationL5", false, "LOCATION_L5");
        public final static Property ProjectId = new Property(5, String.class, "projectId", false, "PROJECT_ID");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    }


    public LocationMasterDao(DaoConfig config) {
        super(config);
    }
    
    public LocationMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_MASTER\" (" + //
                "\"LOCATION_L1\" TEXT," + // 0: locationL1
                "\"LOCATION_L2\" TEXT," + // 1: locationL2
                "\"LOCATION_L3\" TEXT," + // 2: locationL3
                "\"LOCATION_L4\" TEXT," + // 3: locationL4
                "\"LOCATION_L5\" TEXT," + // 4: locationL5
                "\"PROJECT_ID\" TEXT," + // 5: projectId
                "\"STATUS\" TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_MASTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationMaster entity) {
        stmt.clearBindings();
 
        String locationL1 = entity.getLocationL1();
        if (locationL1 != null) {
            stmt.bindString(1, locationL1);
        }
 
        String locationL2 = entity.getLocationL2();
        if (locationL2 != null) {
            stmt.bindString(2, locationL2);
        }
 
        String locationL3 = entity.getLocationL3();
        if (locationL3 != null) {
            stmt.bindString(3, locationL3);
        }
 
        String locationL4 = entity.getLocationL4();
        if (locationL4 != null) {
            stmt.bindString(4, locationL4);
        }
 
        String locationL5 = entity.getLocationL5();
        if (locationL5 != null) {
            stmt.bindString(5, locationL5);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(6, projectId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationMaster entity) {
        stmt.clearBindings();
 
        String locationL1 = entity.getLocationL1();
        if (locationL1 != null) {
            stmt.bindString(1, locationL1);
        }
 
        String locationL2 = entity.getLocationL2();
        if (locationL2 != null) {
            stmt.bindString(2, locationL2);
        }
 
        String locationL3 = entity.getLocationL3();
        if (locationL3 != null) {
            stmt.bindString(3, locationL3);
        }
 
        String locationL4 = entity.getLocationL4();
        if (locationL4 != null) {
            stmt.bindString(4, locationL4);
        }
 
        String locationL5 = entity.getLocationL5();
        if (locationL5 != null) {
            stmt.bindString(5, locationL5);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(6, projectId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocationMaster readEntity(Cursor cursor, int offset) {
        LocationMaster entity = new LocationMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // locationL1
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // locationL2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // locationL3
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // locationL4
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locationL5
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // projectId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationMaster entity, int offset) {
        entity.setLocationL1(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLocationL2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocationL3(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocationL4(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocationL5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocationMaster entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocationMaster entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocationMaster entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
