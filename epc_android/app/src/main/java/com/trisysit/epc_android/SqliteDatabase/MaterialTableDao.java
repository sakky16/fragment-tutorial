package com.trisysit.epc_android.SqliteDatabase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL_TABLE".
*/
public class MaterialTableDao extends AbstractDao<MaterialTable, String> {

    public static final String TABLENAME = "MATERIAL_TABLE";

    /**
     * Properties of entity MaterialTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Qnty = new Property(2, int.class, "qnty", false, "QNTY");
        public final static Property ActualQnty = new Property(3, int.class, "actualQnty", false, "ACTUAL_QNTY");
        public final static Property Unit = new Property(4, String.class, "unit", false, "UNIT");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property TaskId = new Property(6, String.class, "taskId", false, "TASK_ID");
        public final static Property MaterialCount = new Property(7, String.class, "materialCount", false, "MATERIAL_COUNT");
        public final static Property ProjectId = new Property(8, String.class, "projectId", false, "PROJECT_ID");
        public final static Property CreatedDate = new Property(9, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property CreatedBy = new Property(10, String.class, "createdBy", false, "CREATED_BY");
        public final static Property UpdatedDate = new Property(11, String.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property UpdatedBy = new Property(12, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property Schedule = new Property(13, String.class, "schedule", false, "SCHEDULE");
        public final static Property MaterialMobileId = new Property(14, String.class, "materialMobileId", true, "MATERIAL_MOBILE_ID");
        public final static Property SrNo = new Property(15, String.class, "srNo", false, "SR_NO");
    }


    public MaterialTableDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL_TABLE\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"QNTY\" INTEGER NOT NULL ," + // 2: qnty
                "\"ACTUAL_QNTY\" INTEGER NOT NULL ," + // 3: actualQnty
                "\"UNIT\" TEXT," + // 4: unit
                "\"STATUS\" TEXT," + // 5: status
                "\"TASK_ID\" TEXT," + // 6: taskId
                "\"MATERIAL_COUNT\" TEXT," + // 7: materialCount
                "\"PROJECT_ID\" TEXT," + // 8: projectId
                "\"CREATED_DATE\" TEXT," + // 9: createdDate
                "\"CREATED_BY\" TEXT," + // 10: createdBy
                "\"UPDATED_DATE\" TEXT," + // 11: updatedDate
                "\"UPDATED_BY\" TEXT," + // 12: updatedBy
                "\"SCHEDULE\" TEXT," + // 13: schedule
                "\"MATERIAL_MOBILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 14: materialMobileId
                "\"SR_NO\" TEXT);"); // 15: srNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaterialTable entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getQnty());
        stmt.bindLong(4, entity.getActualQnty());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(7, taskId);
        }
 
        String materialCount = entity.getMaterialCount();
        if (materialCount != null) {
            stmt.bindString(8, materialCount);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(9, projectId);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(10, createdDate);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(11, createdBy);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(12, updatedDate);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(13, updatedBy);
        }
 
        String schedule = entity.getSchedule();
        if (schedule != null) {
            stmt.bindString(14, schedule);
        }
 
        String materialMobileId = entity.getMaterialMobileId();
        if (materialMobileId != null) {
            stmt.bindString(15, materialMobileId);
        }
 
        String srNo = entity.getSrNo();
        if (srNo != null) {
            stmt.bindString(16, srNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaterialTable entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getQnty());
        stmt.bindLong(4, entity.getActualQnty());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(7, taskId);
        }
 
        String materialCount = entity.getMaterialCount();
        if (materialCount != null) {
            stmt.bindString(8, materialCount);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(9, projectId);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(10, createdDate);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(11, createdBy);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(12, updatedDate);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(13, updatedBy);
        }
 
        String schedule = entity.getSchedule();
        if (schedule != null) {
            stmt.bindString(14, schedule);
        }
 
        String materialMobileId = entity.getMaterialMobileId();
        if (materialMobileId != null) {
            stmt.bindString(15, materialMobileId);
        }
 
        String srNo = entity.getSrNo();
        if (srNo != null) {
            stmt.bindString(16, srNo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14);
    }    

    @Override
    public MaterialTable readEntity(Cursor cursor, int offset) {
        MaterialTable entity = new MaterialTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // qnty
            cursor.getInt(offset + 3), // actualQnty
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taskId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // materialCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // projectId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createdDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createdBy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updatedDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updatedBy
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // schedule
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // materialMobileId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // srNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaterialTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQnty(cursor.getInt(offset + 2));
        entity.setActualQnty(cursor.getInt(offset + 3));
        entity.setUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMaterialCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProjectId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatedBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdatedDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSchedule(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMaterialMobileId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSrNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MaterialTable entity, long rowId) {
        return entity.getMaterialMobileId();
    }
    
    @Override
    public String getKey(MaterialTable entity) {
        if(entity != null) {
            return entity.getMaterialMobileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MaterialTable entity) {
        return entity.getMaterialMobileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
