package com.trisysit.epc_android.SqliteDatabase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_TABLE".
*/
public class ProjectTableDao extends AbstractDao<ProjectTable, String> {

    public static final String TABLENAME = "PROJECT_TABLE";

    /**
     * Properties of entity ProjectTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProjectId = new Property(0, String.class, "projectId", true, "PROJECT_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PercentageCompletion = new Property(2, Double.class, "percentageCompletion", false, "PERCENTAGE_COMPLETION");
        public final static Property Amount = new Property(3, String.class, "amount", false, "AMOUNT");
        public final static Property Months = new Property(4, Integer.class, "months", false, "MONTHS");
        public final static Property Members = new Property(5, Integer.class, "members", false, "MEMBERS");
        public final static Property CreatedBy = new Property(6, String.class, "createdBy", false, "CREATED_BY");
        public final static Property UpdatedBy = new Property(7, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property CreatedDate = new Property(8, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property UpdatedDate = new Property(9, String.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property ProjectStartDate = new Property(10, String.class, "projectStartDate", false, "PROJECT_START_DATE");
        public final static Property ProjectEndDate = new Property(11, String.class, "projectEndDate", false, "PROJECT_END_DATE");
        public final static Property ParentProjectId = new Property(12, String.class, "parentProjectId", false, "PARENT_PROJECT_ID");
        public final static Property PercentToComplete = new Property(13, Double.class, "percentToComplete", false, "PERCENT_TO_COMPLETE");
        public final static Property CriticalTask = new Property(14, long.class, "criticalTask", false, "CRITICAL_TASK");
        public final static Property TotalTask = new Property(15, long.class, "totalTask", false, "TOTAL_TASK");
        public final static Property NoOfDelayedTask = new Property(16, long.class, "noOfDelayedTask", false, "NO_OF_DELAYED_TASK");
        public final static Property OnTimeTask = new Property(17, long.class, "onTimeTask", false, "ON_TIME_TASK");
        public final static Property BeforeTimeTask = new Property(18, long.class, "beforeTimeTask", false, "BEFORE_TIME_TASK");
        public final static Property NoOfCompletedTask = new Property(19, long.class, "noOfCompletedTask", false, "NO_OF_COMPLETED_TASK");
        public final static Property NoOfProjects = new Property(20, Long.class, "noOfProjects", false, "NO_OF_PROJECTS");
        public final static Property DelayedCriticalTasks = new Property(21, Long.class, "delayedCriticalTasks", false, "DELAYED_CRITICAL_TASKS");
        public final static Property DelayedNonCriticalTasks = new Property(22, Long.class, "delayedNonCriticalTasks", false, "DELAYED_NON_CRITICAL_TASKS");
    }


    public ProjectTableDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_TABLE\" (" + //
                "\"PROJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: projectId
                "\"NAME\" TEXT," + // 1: name
                "\"PERCENTAGE_COMPLETION\" REAL," + // 2: percentageCompletion
                "\"AMOUNT\" TEXT," + // 3: amount
                "\"MONTHS\" INTEGER," + // 4: months
                "\"MEMBERS\" INTEGER," + // 5: members
                "\"CREATED_BY\" TEXT," + // 6: createdBy
                "\"UPDATED_BY\" TEXT," + // 7: updatedBy
                "\"CREATED_DATE\" TEXT," + // 8: createdDate
                "\"UPDATED_DATE\" TEXT," + // 9: updatedDate
                "\"PROJECT_START_DATE\" TEXT," + // 10: projectStartDate
                "\"PROJECT_END_DATE\" TEXT," + // 11: projectEndDate
                "\"PARENT_PROJECT_ID\" TEXT," + // 12: parentProjectId
                "\"PERCENT_TO_COMPLETE\" REAL," + // 13: percentToComplete
                "\"CRITICAL_TASK\" INTEGER NOT NULL ," + // 14: criticalTask
                "\"TOTAL_TASK\" INTEGER NOT NULL ," + // 15: totalTask
                "\"NO_OF_DELAYED_TASK\" INTEGER NOT NULL ," + // 16: noOfDelayedTask
                "\"ON_TIME_TASK\" INTEGER NOT NULL ," + // 17: onTimeTask
                "\"BEFORE_TIME_TASK\" INTEGER NOT NULL ," + // 18: beforeTimeTask
                "\"NO_OF_COMPLETED_TASK\" INTEGER NOT NULL ," + // 19: noOfCompletedTask
                "\"NO_OF_PROJECTS\" INTEGER," + // 20: noOfProjects
                "\"DELAYED_CRITICAL_TASKS\" INTEGER," + // 21: delayedCriticalTasks
                "\"DELAYED_NON_CRITICAL_TASKS\" INTEGER);"); // 22: delayedNonCriticalTasks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectTable entity) {
        stmt.clearBindings();
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(1, projectId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double percentageCompletion = entity.getPercentageCompletion();
        if (percentageCompletion != null) {
            stmt.bindDouble(3, percentageCompletion);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        Integer months = entity.getMonths();
        if (months != null) {
            stmt.bindLong(5, months);
        }
 
        Integer members = entity.getMembers();
        if (members != null) {
            stmt.bindLong(6, members);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(7, createdBy);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(8, updatedBy);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(9, createdDate);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(10, updatedDate);
        }
 
        String projectStartDate = entity.getProjectStartDate();
        if (projectStartDate != null) {
            stmt.bindString(11, projectStartDate);
        }
 
        String projectEndDate = entity.getProjectEndDate();
        if (projectEndDate != null) {
            stmt.bindString(12, projectEndDate);
        }
 
        String parentProjectId = entity.getParentProjectId();
        if (parentProjectId != null) {
            stmt.bindString(13, parentProjectId);
        }
 
        Double percentToComplete = entity.getPercentToComplete();
        if (percentToComplete != null) {
            stmt.bindDouble(14, percentToComplete);
        }
        stmt.bindLong(15, entity.getCriticalTask());
        stmt.bindLong(16, entity.getTotalTask());
        stmt.bindLong(17, entity.getNoOfDelayedTask());
        stmt.bindLong(18, entity.getOnTimeTask());
        stmt.bindLong(19, entity.getBeforeTimeTask());
        stmt.bindLong(20, entity.getNoOfCompletedTask());
 
        Long noOfProjects = entity.getNoOfProjects();
        if (noOfProjects != null) {
            stmt.bindLong(21, noOfProjects);
        }
 
        Long delayedCriticalTasks = entity.getDelayedCriticalTasks();
        if (delayedCriticalTasks != null) {
            stmt.bindLong(22, delayedCriticalTasks);
        }
 
        Long delayedNonCriticalTasks = entity.getDelayedNonCriticalTasks();
        if (delayedNonCriticalTasks != null) {
            stmt.bindLong(23, delayedNonCriticalTasks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectTable entity) {
        stmt.clearBindings();
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(1, projectId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double percentageCompletion = entity.getPercentageCompletion();
        if (percentageCompletion != null) {
            stmt.bindDouble(3, percentageCompletion);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        Integer months = entity.getMonths();
        if (months != null) {
            stmt.bindLong(5, months);
        }
 
        Integer members = entity.getMembers();
        if (members != null) {
            stmt.bindLong(6, members);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(7, createdBy);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(8, updatedBy);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(9, createdDate);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(10, updatedDate);
        }
 
        String projectStartDate = entity.getProjectStartDate();
        if (projectStartDate != null) {
            stmt.bindString(11, projectStartDate);
        }
 
        String projectEndDate = entity.getProjectEndDate();
        if (projectEndDate != null) {
            stmt.bindString(12, projectEndDate);
        }
 
        String parentProjectId = entity.getParentProjectId();
        if (parentProjectId != null) {
            stmt.bindString(13, parentProjectId);
        }
 
        Double percentToComplete = entity.getPercentToComplete();
        if (percentToComplete != null) {
            stmt.bindDouble(14, percentToComplete);
        }
        stmt.bindLong(15, entity.getCriticalTask());
        stmt.bindLong(16, entity.getTotalTask());
        stmt.bindLong(17, entity.getNoOfDelayedTask());
        stmt.bindLong(18, entity.getOnTimeTask());
        stmt.bindLong(19, entity.getBeforeTimeTask());
        stmt.bindLong(20, entity.getNoOfCompletedTask());
 
        Long noOfProjects = entity.getNoOfProjects();
        if (noOfProjects != null) {
            stmt.bindLong(21, noOfProjects);
        }
 
        Long delayedCriticalTasks = entity.getDelayedCriticalTasks();
        if (delayedCriticalTasks != null) {
            stmt.bindLong(22, delayedCriticalTasks);
        }
 
        Long delayedNonCriticalTasks = entity.getDelayedNonCriticalTasks();
        if (delayedNonCriticalTasks != null) {
            stmt.bindLong(23, delayedNonCriticalTasks);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ProjectTable readEntity(Cursor cursor, int offset) {
        ProjectTable entity = new ProjectTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // projectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // percentageCompletion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // months
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // members
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createdBy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updatedBy
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createdDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // updatedDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // projectStartDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // projectEndDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // parentProjectId
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // percentToComplete
            cursor.getLong(offset + 14), // criticalTask
            cursor.getLong(offset + 15), // totalTask
            cursor.getLong(offset + 16), // noOfDelayedTask
            cursor.getLong(offset + 17), // onTimeTask
            cursor.getLong(offset + 18), // beforeTimeTask
            cursor.getLong(offset + 19), // noOfCompletedTask
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // noOfProjects
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // delayedCriticalTasks
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22) // delayedNonCriticalTasks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectTable entity, int offset) {
        entity.setProjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPercentageCompletion(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMonths(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMembers(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreatedBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdatedBy(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreatedDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdatedDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProjectStartDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProjectEndDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setParentProjectId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPercentToComplete(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setCriticalTask(cursor.getLong(offset + 14));
        entity.setTotalTask(cursor.getLong(offset + 15));
        entity.setNoOfDelayedTask(cursor.getLong(offset + 16));
        entity.setOnTimeTask(cursor.getLong(offset + 17));
        entity.setBeforeTimeTask(cursor.getLong(offset + 18));
        entity.setNoOfCompletedTask(cursor.getLong(offset + 19));
        entity.setNoOfProjects(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setDelayedCriticalTasks(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setDelayedNonCriticalTasks(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ProjectTable entity, long rowId) {
        return entity.getProjectId();
    }
    
    @Override
    public String getKey(ProjectTable entity) {
        if(entity != null) {
            return entity.getProjectId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectTable entity) {
        return entity.getProjectId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
