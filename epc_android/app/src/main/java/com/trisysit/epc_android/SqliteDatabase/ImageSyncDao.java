package com.trisysit.epc_android.SqliteDatabase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_SYNC".
*/
public class ImageSyncDao extends AbstractDao<ImageSync, String> {

    public static final String TABLENAME = "IMAGE_SYNC";

    /**
     * Properties of entity ImageSync.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageUrl = new Property(0, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageParam = new Property(1, long.class, "imageParam", false, "IMAGE_PARAM");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property Id = new Property(3, String.class, "id", true, "ID");
    }


    public ImageSyncDao(DaoConfig config) {
        super(config);
    }
    
    public ImageSyncDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_SYNC\" (" + //
                "\"IMAGE_URL\" TEXT," + // 0: imageUrl
                "\"IMAGE_PARAM\" INTEGER NOT NULL ," + // 1: imageParam
                "\"STATUS\" TEXT," + // 2: status
                "\"ID\" TEXT PRIMARY KEY NOT NULL );"); // 3: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_SYNC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageSync entity) {
        stmt.clearBindings();
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(1, imageUrl);
        }
        stmt.bindLong(2, entity.getImageParam());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageSync entity) {
        stmt.clearBindings();
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(1, imageUrl);
        }
        stmt.bindLong(2, entity.getImageParam());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public ImageSync readEntity(Cursor cursor, int offset) {
        ImageSync entity = new ImageSync( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imageUrl
            cursor.getLong(offset + 1), // imageParam
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageSync entity, int offset) {
        entity.setImageUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageParam(cursor.getLong(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ImageSync entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ImageSync entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageSync entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
