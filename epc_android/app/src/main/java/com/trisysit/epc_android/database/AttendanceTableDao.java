package com.trisysit.epc_android.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trisysit.epc_android.database.AttendanceTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTENDANCE_TABLE.
*/
public class AttendanceTableDao extends AbstractDao<AttendanceTable, String> {

    public static final String TABLENAME = "ATTENDANCE_TABLE";

    /**
     * Properties of entity AttendanceTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property InTime = new Property(3, String.class, "inTime", false, "IN_TIME");
        public final static Property InGPS = new Property(4, String.class, "inGPS", false, "IN_GPS");
        public final static Property OutTime = new Property(5, String.class, "outTime", false, "OUT_TIME");
        public final static Property OutGPS = new Property(6, String.class, "outGPS", false, "OUT_GPS");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property CreatedDate = new Property(8, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property CreatedBy = new Property(9, String.class, "createdBy", false, "CREATED_BY");
        public final static Property UpdatedDate = new Property(10, String.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property Comment = new Property(11, String.class, "comment", false, "COMMENT");
        public final static Property UpdatedBy = new Property(12, String.class, "updatedBy", false, "UPDATED_BY");
        public final static Property MobileId = new Property(13, String.class, "mobileId", true, "MOBILE_ID");
        public final static Property Image1 = new Property(14, String.class, "image1", false, "IMAGE1");
        public final static Property Image2 = new Property(15, String.class, "image2", false, "IMAGE2");
        public final static Property Image3 = new Property(16, String.class, "image3", false, "IMAGE3");
        public final static Property Image4 = new Property(17, String.class, "image4", false, "IMAGE4");
        public final static Property Image5 = new Property(18, String.class, "image5", false, "IMAGE5");
        public final static Property Image6 = new Property(19, String.class, "image6", false, "IMAGE6");
    };


    public AttendanceTableDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTENDANCE_TABLE' (" + //
                "'ID' TEXT," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DATE' TEXT," + // 2: date
                "'IN_TIME' TEXT," + // 3: inTime
                "'IN_GPS' TEXT," + // 4: inGPS
                "'OUT_TIME' TEXT," + // 5: outTime
                "'OUT_GPS' TEXT," + // 6: outGPS
                "'STATUS' TEXT," + // 7: status
                "'CREATED_DATE' TEXT," + // 8: createdDate
                "'CREATED_BY' TEXT," + // 9: createdBy
                "'UPDATED_DATE' TEXT," + // 10: updatedDate
                "'COMMENT' TEXT," + // 11: comment
                "'UPDATED_BY' TEXT," + // 12: updatedBy
                "'MOBILE_ID' TEXT PRIMARY KEY NOT NULL ," + // 13: mobileId
                "'IMAGE1' TEXT," + // 14: image1
                "'IMAGE2' TEXT," + // 15: image2
                "'IMAGE3' TEXT," + // 16: image3
                "'IMAGE4' TEXT," + // 17: image4
                "'IMAGE5' TEXT," + // 18: image5
                "'IMAGE6' TEXT);"); // 19: image6
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTENDANCE_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AttendanceTable entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String inTime = entity.getInTime();
        if (inTime != null) {
            stmt.bindString(4, inTime);
        }
 
        String inGPS = entity.getInGPS();
        if (inGPS != null) {
            stmt.bindString(5, inGPS);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(6, outTime);
        }
 
        String outGPS = entity.getOutGPS();
        if (outGPS != null) {
            stmt.bindString(7, outGPS);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(9, createdDate);
        }
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(10, createdBy);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(11, updatedDate);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
 
        String updatedBy = entity.getUpdatedBy();
        if (updatedBy != null) {
            stmt.bindString(13, updatedBy);
        }
 
        String mobileId = entity.getMobileId();
        if (mobileId != null) {
            stmt.bindString(14, mobileId);
        }
 
        String image1 = entity.getImage1();
        if (image1 != null) {
            stmt.bindString(15, image1);
        }
 
        String image2 = entity.getImage2();
        if (image2 != null) {
            stmt.bindString(16, image2);
        }
 
        String image3 = entity.getImage3();
        if (image3 != null) {
            stmt.bindString(17, image3);
        }
 
        String image4 = entity.getImage4();
        if (image4 != null) {
            stmt.bindString(18, image4);
        }
 
        String image5 = entity.getImage5();
        if (image5 != null) {
            stmt.bindString(19, image5);
        }
 
        String image6 = entity.getImage6();
        if (image6 != null) {
            stmt.bindString(20, image6);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13);
    }    

    /** @inheritdoc */
    @Override
    public AttendanceTable readEntity(Cursor cursor, int offset) {
        AttendanceTable entity = new AttendanceTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // inGPS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // outGPS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createdDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createdBy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updatedDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // comment
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updatedBy
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mobileId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // image1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // image2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // image3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // image4
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // image5
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // image6
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AttendanceTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInGPS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutGPS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreatedDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedBy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatedDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMobileId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImage2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImage3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImage4(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImage5(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setImage6(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AttendanceTable entity, long rowId) {
        return entity.getMobileId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AttendanceTable entity) {
        if(entity != null) {
            return entity.getMobileId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
