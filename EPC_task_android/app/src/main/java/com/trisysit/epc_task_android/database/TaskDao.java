package com.trisysit.epc_task_android.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, String> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskId = new Property(0, String.class, "taskId", false, "TASK_ID");
        public final static Property Comment = new Property(1, String.class, "comment", false, "COMMENT");
        public final static Property Priority = new Property(2, String.class, "priority", false, "PRIORITY");
        public final static Property Subject = new Property(3, String.class, "subject", false, "SUBJECT");
        public final static Property MobileId = new Property(4, String.class, "mobileId", true, "MOBILE_ID");
        public final static Property TaskCreatedDate = new Property(5, long.class, "taskCreatedDate", false, "TASK_CREATED_DATE");
        public final static Property TaskFor = new Property(6, String.class, "taskFor", false, "TASK_FOR");
        public final static Property TaskStatus = new Property(7, String.class, "taskStatus", false, "TASK_STATUS");
        public final static Property TaskUpdatedDate = new Property(8, long.class, "taskUpdatedDate", false, "TASK_UPDATED_DATE");
        public final static Property AssignedTo = new Property(9, String.class, "assignedTo", false, "ASSIGNED_TO");
        public final static Property AssignedToName = new Property(10, String.class, "assignedToName", false, "ASSIGNED_TO_NAME");
        public final static Property TaskCreatedBy = new Property(11, String.class, "taskCreatedBy", false, "TASK_CREATED_BY");
        public final static Property TaskUpdatedBy = new Property(12, String.class, "taskUpdatedBy", false, "TASK_UPDATED_BY");
        public final static Property TaskStartDate = new Property(13, long.class, "taskStartDate", false, "TASK_START_DATE");
        public final static Property TaskEndDate = new Property(14, long.class, "taskEndDate", false, "TASK_END_DATE");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
        public final static Property TaskEffort = new Property(16, String.class, "taskEffort", false, "TASK_EFFORT");
        public final static Property TaskActualStartDate = new Property(17, long.class, "taskActualStartDate", false, "TASK_ACTUAL_START_DATE");
        public final static Property TaskActualEndDate = new Property(18, long.class, "taskActualEndDate", false, "TASK_ACTUAL_END_DATE");
        public final static Property TaskActualEffort = new Property(19, String.class, "taskActualEffort", false, "TASK_ACTUAL_EFFORT");
        public final static Property ParentTaskId = new Property(20, String.class, "parentTaskId", false, "PARENT_TASK_ID");
        public final static Property ProjectId = new Property(21, String.class, "projectId", false, "PROJECT_ID");
        public final static Property CategoryId = new Property(22, String.class, "categoryId", false, "CATEGORY_ID");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"TASK_ID\" TEXT," + // 0: taskId
                "\"COMMENT\" TEXT," + // 1: comment
                "\"PRIORITY\" TEXT," + // 2: priority
                "\"SUBJECT\" TEXT," + // 3: subject
                "\"MOBILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 4: mobileId
                "\"TASK_CREATED_DATE\" INTEGER NOT NULL ," + // 5: taskCreatedDate
                "\"TASK_FOR\" TEXT," + // 6: taskFor
                "\"TASK_STATUS\" TEXT," + // 7: taskStatus
                "\"TASK_UPDATED_DATE\" INTEGER NOT NULL ," + // 8: taskUpdatedDate
                "\"ASSIGNED_TO\" TEXT," + // 9: assignedTo
                "\"ASSIGNED_TO_NAME\" TEXT," + // 10: assignedToName
                "\"TASK_CREATED_BY\" TEXT," + // 11: taskCreatedBy
                "\"TASK_UPDATED_BY\" TEXT," + // 12: taskUpdatedBy
                "\"TASK_START_DATE\" INTEGER NOT NULL ," + // 13: taskStartDate
                "\"TASK_END_DATE\" INTEGER NOT NULL ," + // 14: taskEndDate
                "\"STATUS\" TEXT," + // 15: status
                "\"TASK_EFFORT\" TEXT," + // 16: taskEffort
                "\"TASK_ACTUAL_START_DATE\" INTEGER NOT NULL ," + // 17: taskActualStartDate
                "\"TASK_ACTUAL_END_DATE\" INTEGER NOT NULL ," + // 18: taskActualEndDate
                "\"TASK_ACTUAL_EFFORT\" TEXT," + // 19: taskActualEffort
                "\"PARENT_TASK_ID\" TEXT," + // 20: parentTaskId
                "\"PROJECT_ID\" TEXT," + // 21: projectId
                "\"CATEGORY_ID\" TEXT);"); // 22: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(2, comment);
        }
 
        String priority = entity.getPriority();
        if (priority != null) {
            stmt.bindString(3, priority);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(4, subject);
        }
 
        String mobileId = entity.getMobileId();
        if (mobileId != null) {
            stmt.bindString(5, mobileId);
        }
        stmt.bindLong(6, entity.getTaskCreatedDate());
 
        String taskFor = entity.getTaskFor();
        if (taskFor != null) {
            stmt.bindString(7, taskFor);
        }
 
        String taskStatus = entity.getTaskStatus();
        if (taskStatus != null) {
            stmt.bindString(8, taskStatus);
        }
        stmt.bindLong(9, entity.getTaskUpdatedDate());
 
        String assignedTo = entity.getAssignedTo();
        if (assignedTo != null) {
            stmt.bindString(10, assignedTo);
        }
 
        String assignedToName = entity.getAssignedToName();
        if (assignedToName != null) {
            stmt.bindString(11, assignedToName);
        }
 
        String taskCreatedBy = entity.getTaskCreatedBy();
        if (taskCreatedBy != null) {
            stmt.bindString(12, taskCreatedBy);
        }
 
        String taskUpdatedBy = entity.getTaskUpdatedBy();
        if (taskUpdatedBy != null) {
            stmt.bindString(13, taskUpdatedBy);
        }
        stmt.bindLong(14, entity.getTaskStartDate());
        stmt.bindLong(15, entity.getTaskEndDate());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String taskEffort = entity.getTaskEffort();
        if (taskEffort != null) {
            stmt.bindString(17, taskEffort);
        }
        stmt.bindLong(18, entity.getTaskActualStartDate());
        stmt.bindLong(19, entity.getTaskActualEndDate());
 
        String taskActualEffort = entity.getTaskActualEffort();
        if (taskActualEffort != null) {
            stmt.bindString(20, taskActualEffort);
        }
 
        String parentTaskId = entity.getParentTaskId();
        if (parentTaskId != null) {
            stmt.bindString(21, parentTaskId);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(22, projectId);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(23, categoryId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(2, comment);
        }
 
        String priority = entity.getPriority();
        if (priority != null) {
            stmt.bindString(3, priority);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(4, subject);
        }
 
        String mobileId = entity.getMobileId();
        if (mobileId != null) {
            stmt.bindString(5, mobileId);
        }
        stmt.bindLong(6, entity.getTaskCreatedDate());
 
        String taskFor = entity.getTaskFor();
        if (taskFor != null) {
            stmt.bindString(7, taskFor);
        }
 
        String taskStatus = entity.getTaskStatus();
        if (taskStatus != null) {
            stmt.bindString(8, taskStatus);
        }
        stmt.bindLong(9, entity.getTaskUpdatedDate());
 
        String assignedTo = entity.getAssignedTo();
        if (assignedTo != null) {
            stmt.bindString(10, assignedTo);
        }
 
        String assignedToName = entity.getAssignedToName();
        if (assignedToName != null) {
            stmt.bindString(11, assignedToName);
        }
 
        String taskCreatedBy = entity.getTaskCreatedBy();
        if (taskCreatedBy != null) {
            stmt.bindString(12, taskCreatedBy);
        }
 
        String taskUpdatedBy = entity.getTaskUpdatedBy();
        if (taskUpdatedBy != null) {
            stmt.bindString(13, taskUpdatedBy);
        }
        stmt.bindLong(14, entity.getTaskStartDate());
        stmt.bindLong(15, entity.getTaskEndDate());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String taskEffort = entity.getTaskEffort();
        if (taskEffort != null) {
            stmt.bindString(17, taskEffort);
        }
        stmt.bindLong(18, entity.getTaskActualStartDate());
        stmt.bindLong(19, entity.getTaskActualEndDate());
 
        String taskActualEffort = entity.getTaskActualEffort();
        if (taskActualEffort != null) {
            stmt.bindString(20, taskActualEffort);
        }
 
        String parentTaskId = entity.getParentTaskId();
        if (parentTaskId != null) {
            stmt.bindString(21, parentTaskId);
        }
 
        String projectId = entity.getProjectId();
        if (projectId != null) {
            stmt.bindString(22, projectId);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(23, categoryId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // comment
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // priority
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subject
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobileId
            cursor.getLong(offset + 5), // taskCreatedDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taskFor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // taskStatus
            cursor.getLong(offset + 8), // taskUpdatedDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // assignedTo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // assignedToName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // taskCreatedBy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // taskUpdatedBy
            cursor.getLong(offset + 13), // taskStartDate
            cursor.getLong(offset + 14), // taskEndDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // taskEffort
            cursor.getLong(offset + 17), // taskActualStartDate
            cursor.getLong(offset + 18), // taskActualEndDate
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // taskActualEffort
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // parentTaskId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // projectId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // categoryId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setTaskId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setComment(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPriority(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubject(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobileId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaskCreatedDate(cursor.getLong(offset + 5));
        entity.setTaskFor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTaskStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTaskUpdatedDate(cursor.getLong(offset + 8));
        entity.setAssignedTo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAssignedToName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTaskCreatedBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTaskUpdatedBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTaskStartDate(cursor.getLong(offset + 13));
        entity.setTaskEndDate(cursor.getLong(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTaskEffort(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTaskActualStartDate(cursor.getLong(offset + 17));
        entity.setTaskActualEndDate(cursor.getLong(offset + 18));
        entity.setTaskActualEffort(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setParentTaskId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setProjectId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCategoryId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Task entity, long rowId) {
        return entity.getMobileId();
    }
    
    @Override
    public String getKey(Task entity) {
        if(entity != null) {
            return entity.getMobileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getMobileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
